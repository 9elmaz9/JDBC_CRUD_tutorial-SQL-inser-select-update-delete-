Let’s write code to insert a new record into the table Users with following details:
username: bill
password: secretpass
fullname: Bill Gates
email: bill.gates@microsoft.com
Here’s the code snippet:

String sql = "INSERT INTO Users (username, password, fullname, email) VALUES (?, ?, ?, ?)";
 
PreparedStatement statement = conn.prepareStatement(sql);
statement.setString(1, "bill");
statement.setString(2, "secretpass");
statement.setString(3, "Bill Gates");
statement.setString(4, "bill.gates@microsoft.com");
 
int rowsInserted = statement.executeUpdate();
if (rowsInserted > 0) {
    System.out.println("A new user was inserted successfully!");
}


In this code, we create a parameterized SQL INSERT statement and create a PreparedStatement from the Connection object.
To set values for the parameters in the INSERT statement, we use the PreparedStatement‘s setString() methods because
all these columns in the table Users are of type VARCHAR which is translated to String type in Java. Note that the parameter 
index is 1-based (unlike 0-based index in Java array).

The PreparedStatement interface provides various setXXX() methods corresponding to each data type, for example:
* setBoolean(int parameterIndex, boolean x)
* setDate(int parameterIndex, Date x)
* setFloat(int parameterIndex, float x)
* …

And so on. Which method to be used is depending on the type of the corresponding column in the database table.
Finally we call the PreparedStatement’s executeUpdate() method to execute the INSERT statement. This method returns an 
µupdate count indicating how many rows in the table were affected by the query, so checking this return value is necessary to ensure the query was executed successfully. 
In this case, executeUpdate() method should return 1 to indicate one record was inserted.
 
